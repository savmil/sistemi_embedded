#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{listings,xcolor,courier,bookmark}
\usepackage{listingsutf8}
\definecolor{darkblue}{named}{blue}
\definecolor{darkred}{named}{red}
\definecolor{grau}{named}{gray}
\let\Righttorque\relax
\lstset{
captionpos=b,
commentstyle=\color[rgb]{0.133,0.545,0.133},
keywordstyle=\color{darkblue},
stringstyle=\color{darkred},
extendedchars=true,
basicstyle=\small\ttfamily,
showstringspaces=false,
tabsize=2,
numbers=left,
numberstyle=\tiny,
breakautoindent  = true,
breakindent      = 2em,
breaklines       = true,
postbreak        = ,
prebreak         = \raisebox{-.8ex}[0ex][0ex]{\Righttorque},
showspaces=false, 
showtabs=false, 
showstringspaces=false,
language=VHDL,
frame=single,
morecomment=[s]{--}
}


\renewcommand*{\lstlistingname}{Codice Componente}


\usepackage{fancyhdr}
\pagestyle{fancy}

\fancyhead{} 
\fancyfoot{} 

\fancyhead[RO,LE]{\bfseries \leftmark}
\fancyfoot[LE,RO]{\thepage}
\fancyfoot[LO,CE]{Tesina in ASE: Architetture dei Sistemi di Elaborazione}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}

\date{}
\cfoot{}
\usepackage{tikz}
\usetikzlibrary{matrix,calc}

%isolated term
%#1 - Optional. Space between node and grouping line. Default=0
%#2 - node
%#3 - filling color
\newcommand{\implicantsol}[3][0]{
    \draw[rounded corners=3pt, fill=#3, opacity=0.3] ($(#2.north west)+(135:#1)$) rectangle ($(#2.south east)+(-45:#1)$);
    }


%internal group
%#1 - Optional. Space between node and grouping line. Default=0
%#2 - top left node
%#3 - bottom right node
%#4 - filling color
\newcommand{\implicant}[4][0]{
    \draw[rounded corners=3pt, fill=#4, opacity=0.3] ($(#2.north west)+(135:#1)$) rectangle ($(#3.south east)+(-45:#1)$);
    }

%group lateral borders
%#1 - Optional. Space between node and grouping line. Default=0
%#2 - top left node
%#3 - bottom right node
%#4 - filling color
\newcommand{\implicantcostats}[4][0]{
    \draw[rounded corners=3pt, fill=#4, opacity=0.3] ($(rf.east |- #2.north)+(90:#1)$)-| ($(#2.east)+(0:#1)$) |- ($(rf.east |- #3.south)+(-90:#1)$);
    \draw[rounded corners=3pt, fill=#4, opacity=0.3] ($(cf.west |- #2.north)+(90:#1)$) -| ($(#3.west)+(180:#1)$) |- ($(cf.west |- #3.south)+(-90:#1)$);
}

%group top-bottom borders
%#1 - Optional. Space between node and grouping line. Default=0
%#2 - top left node
%#3 - bottom right node
%#4 - filling color
\newcommand{\implicantdaltbaix}[4][0]{
    \draw[rounded corners=3pt, fill=#4, opacity=0.3] ($(cf.south -| #2.west)+(180:#1)$) |- ($(#2.south)+(-90:#1)$) -| ($(cf.south -| #3.east)+(0:#1)$);
    \draw[rounded corners=3pt, fill=#4, opacity=0.3] ($(rf.north -| #2.west)+(180:#1)$) |- ($(#3.north)+(90:#1)$) -| ($(rf.north -| #3.east)+(0:#1)$);
}

%group corners
%#1 - Optional. Space between node and grouping line. Default=0
%#2 - filling color
\newcommand{\implicantcantons}[2][0]{
    \draw[rounded corners=3pt, opacity=.3] ($(rf.east |- 0.south)+(-90:#1)$) -| ($(0.east |- cf.south)+(0:#1)$);
    \draw[rounded corners=3pt, opacity=.3] ($(rf.east |- 8.north)+(90:#1)$) -| ($(8.east |- rf.north)+(0:#1)$);
    \draw[rounded corners=3pt, opacity=.3] ($(cf.west |- 2.south)+(-90:#1)$) -| ($(2.west |- cf.south)+(180:#1)$);
    \draw[rounded corners=3pt, opacity=.3] ($(cf.west |- 10.north)+(90:#1)$) -| ($(10.west |- rf.north)+(180:#1)$);
    \fill[rounded corners=3pt, fill=#2, opacity=.3] ($(rf.east |- 0.south)+(-90:#1)$) -|  ($(0.east |- cf.south)+(0:#1)$) [sharp corners] ($(rf.east |- 0.south)+(-90:#1)$) |-  ($(0.east |- cf.south)+(0:#1)$) ;
    \fill[rounded corners=3pt, fill=#2, opacity=.3] ($(rf.east |- 8.north)+(90:#1)$) -| ($(8.east |- rf.north)+(0:#1)$) [sharp corners] ($(rf.east |- 8.north)+(90:#1)$) |- ($(8.east |- rf.north)+(0:#1)$) ;
    \fill[rounded corners=3pt, fill=#2, opacity=.3] ($(cf.west |- 2.south)+(-90:#1)$) -| ($(2.west |- cf.south)+(180:#1)$) [sharp corners]($(cf.west |- 2.south)+(-90:#1)$) |- ($(2.west |- cf.south)+(180:#1)$) ;
    \fill[rounded corners=3pt, fill=#2, opacity=.3] ($(cf.west |- 10.north)+(90:#1)$) -| ($(10.west |- rf.north)+(180:#1)$) [sharp corners] ($(cf.west |- 10.north)+(90:#1)$) |- ($(10.west |- rf.north)+(180:#1)$) ;
}

%Empty Karnaugh map 4x4
\newenvironment{Karnaugh}%
{
\begin{tikzpicture}[baseline=(current bounding box.north),scale=0.8]
\draw (0,0) grid (4,4);
\draw (0,4) -- node [pos=0.7,above right,anchor=south west] {zv} node [pos=0.7,below left,anchor=north east] {xy} ++(135:1);
%
\matrix (mapa) [matrix of nodes,
        column sep={0.8cm,between origins},
        row sep={0.8cm,between origins},
        every node/.style={minimum size=0.3mm},
        anchor=8.center,
        ampersand replacement=\&] at (0.5,0.5)
{
                       \& |(c00)| 00         \& |(c01)| 01         \& |(c11)| 11         \& |(c10)| 10         \& |(cf)| \phantom{00} \\
|(r00)| 00             \& |(0)|  \phantom{0} \& |(1)|  \phantom{0} \& |(3)|  \phantom{0} \& |(2)|  \phantom{0} \&                     \\
|(r01)| 01             \& |(4)|  \phantom{0} \& |(5)|  \phantom{0} \& |(7)|  \phantom{0} \& |(6)|  \phantom{0} \&                     \\
|(r11)| 11             \& |(12)| \phantom{0} \& |(13)| \phantom{0} \& |(15)| \phantom{0} \& |(14)| \phantom{0} \&                     \\
|(r10)| 10             \& |(8)|  \phantom{0} \& |(9)|  \phantom{0} \& |(11)| \phantom{0} \& |(10)| \phantom{0} \&                     \\
|(rf) | \phantom{00}   \&                    \&                    \&                    \&                    \&                     \\
};
}%
{
\end{tikzpicture}
}

%Empty Karnaugh map 2x4
\newenvironment{Karnaughvuit}%
{
\begin{tikzpicture}[baseline=(current bounding box.north),scale=0.8]
\draw (0,0) grid (4,2);
\draw (0,2) -- node [pos=0.7,above right,anchor=south west] {bc} node [pos=0.7,below left,anchor=north east] {a} ++(135:1);
%
\matrix (mapa) [matrix of nodes,
        column sep={0.8cm,between origins},
        row sep={0.8cm,between origins},
        every node/.style={minimum size=0.3mm},
        anchor=4.center,
        ampersand replacement=\&] at (0.5,0.5)
{
                      \& |(c00)| 00         \& |(c01)| 01         \& |(c11)| 11         \& |(c10)| 10         \& |(cf)| \phantom{00} \\
|(r00)| 0             \& |(0)|  \phantom{0} \& |(1)|  \phantom{0} \& |(3)|  \phantom{0} \& |(2)|  \phantom{0} \&                     \\
|(r01)| 1             \& |(4)|  \phantom{0} \& |(5)|  \phantom{0} \& |(7)|  \phantom{0} \& |(6)|  \phantom{0} \&                     \\
|(rf) | \phantom{00}  \&                    \&                    \&                    \&                    \&                     \\
};
}%
{
\end{tikzpicture}
}

%Empty Karnaugh map 2x2
\newenvironment{Karnaughquatre}%
{
\begin{tikzpicture}[baseline=(current bounding box.north),scale=0.8]
\draw (0,0) grid (2,2);
\draw (0,2) -- node [pos=0.7,above right,anchor=south west] {b} node [pos=0.7,below left,anchor=north east] {a} ++(135:1);
%
\matrix (mapa) [matrix of nodes,
        column sep={0.8cm,between origins},
        row sep={0.8cm,between origins},
        every node/.style={minimum size=0.3mm},
        anchor=2.center,
        ampersand replacement=\&] at (0.5,0.5)
{
          \& |(c00)| 0          \& |(c01)| 1  \\
|(r00)| 0 \& |(0)|  \phantom{0} \& |(1)|  \phantom{0} \\
|(r01)| 1 \& |(2)|  \phantom{0} \& |(3)|  \phantom{0} \\
};
}%
{
\end{tikzpicture}
}

%Defines 8 or 16 values (0,1,X)
\newcommand{\contingut}[1]{%
\foreach \x [count=\xi from 0]  in {#1}
     \path (\xi) node {\x};
}

%Places 1 in listed positions
\newcommand{\minterms}[1]{%
    \foreach \x in {#1}
        \path (\x) node {1};
}

%Places 0 in listed positions
\newcommand{\maxterms}[1]{%
    \foreach \x in {#1}
        \path (\x) node {0};
}

%Places X in listed positions
\newcommand{\indeterminats}[1]{%
    \foreach \x in {#1}
        \path (\x) node {X};
}
\end_preamble
\use_default_options true
\master Tesina.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation 0bp
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Soluzione
\end_layout

\begin_layout Subsection
Prerequisiti
\end_layout

\begin_layout Standard
Una distribuzione linux, dove sono presenti i seguenti pacchetti:
\end_layout

\begin_layout Enumerate
build-essential
\end_layout

\begin_layout Enumerate
u-boot-tools
\end_layout

\begin_layout Enumerate
gparted
\end_layout

\begin_layout Enumerate
git
\end_layout

\begin_layout Enumerate
libncurses-dev
\end_layout

\begin_layout Enumerate
libssl-dev
\end_layout

\begin_layout Enumerate
bison
\end_layout

\begin_layout Enumerate
flex
\end_layout

\begin_layout Enumerate
device-tree-compiler
\end_layout

\begin_layout Standard
Se non fossero presenti utilizzare il seguente comando.
\end_layout

\begin_layout Standard
\noindent
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

sudo apt install build-essential u-boot-tools gparted git libncurses-dev
 libssl-dev bison flex device-tree-compiler
\end_layout

\end_inset

Clonare le seguenti repository:
\end_layout

\begin_layout Enumerate
https://github.com/Xilinx/linux-xlnx
\end_layout

\begin_layout Enumerate
https://github.com/Xilinx/u-boot-xlnx
\end_layout

\begin_layout Enumerate
https://github.com/Xilinx/device-tree-xlnx
\end_layout

\begin_layout Standard
Scaricare un filesystem, nel caso specifico è stato scelto Linaro:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

https://releases.linaro.org/debian/images/developer-armhf/latest/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Prima di eseguire qualsiasi operazione, come ad esempio la cross-compilazione
 del kernel, è necessario configurare il terminale con cui si lavorerà.
 La configurazione consiste nell'esportare alcune variabili d'ambiente lanciando
 lo script prepare_environment.sh riportato di seguito:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#!/bin/bash
\end_layout

\begin_layout Plain Layout

VIVADO_PATH=$HOME/Vivado
\end_layout

\begin_layout Plain Layout

VIVADO_VERS=2018.3
\end_layout

\begin_layout Plain Layout

SDK_PATH=$HOME/SDK
\end_layout

\begin_layout Plain Layout

SDK_VERS=2018.3
\end_layout

\begin_layout Plain Layout

source $VIVADO_PATH/$VIVADO_VERS/settings64.sh
\end_layout

\begin_layout Plain Layout

source $SDK_PATH/$SDK_VERS/settings64.sh
\end_layout

\begin_layout Plain Layout

export ARCH=arm
\end_layout

\begin_layout Plain Layout

export CROSS_COMPILE=arm-linux-gnueabihf-
\end_layout

\begin_layout Plain Layout

export PATH=$HOME/Scrivania/UART_KERNEL_MODE/linux-xlnx/tools/:$PATH
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Compilazione u-boot
\end_layout

\begin_layout Standard
Posizionarsi all' interno della cartella u-boot-xlnx.
 Prima di procedere alla compilazione bisogna modificare parte del file
 zynq-common.h presente in:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

include/configs/zynq-common.h
\end_layout

\end_inset


\end_layout

\begin_layout Standard
La porzione di codice da modificare è la seguente
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

"sdboot=if mmcinfo; then " 
\backslash

\end_layout

\begin_layout Plain Layout

"run uenvboot;" 
\backslash

\end_layout

\begin_layout Plain Layout

"echo Copying Linux from SD to RAM...
 && " 
\backslash

\end_layout

\begin_layout Plain Layout

"load mmc 0 ${kernel_load_address} ${kernel_image} && " 
\backslash

\end_layout

\begin_layout Plain Layout

"load mmc 0 ${devicetree_load_address} ${devicetree_image} && " 
\backslash

\end_layout

\begin_layout Plain Layout

"load mmc 0 ${ramdisk_load_address} ${ramdisk_image} && " 
\backslash

\end_layout

\begin_layout Plain Layout

"bootm ${kernel_load_address} ${ramdisk_load_address} ${devicetree_load_address}
; "
\end_layout

\end_inset


\end_layout

\begin_layout Standard
e va modificata come segue
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

"sdboot=if mmcinfo; then " 
\backslash

\end_layout

\begin_layout Plain Layout

"run uenvboot;" 
\backslash

\end_layout

\begin_layout Plain Layout

"echo Copying Linux from SD to RAM...
 && " 
\backslash

\end_layout

\begin_layout Plain Layout

"load mmc 0 ${kernel_load_address} ${kernel_image} && " 
\backslash

\end_layout

\begin_layout Plain Layout

"load mmc 0 ${devicetree_load_address} ${devicetree_image} && " 
\backslash

\end_layout

\begin_layout Plain Layout

"bootm ${kernel_load_address} - ${devicetree_load_address}; "
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Una volta fatto ciò è possibile procedere alla compilazione.
 Dal terminale in cui era stato lanciato lo script prepare_environment,
 eseguendo i seguenti comandi,
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

make CROSS-COMPILE=arm-linux-gnueabihf- zynq_zybo_config 
\end_layout

\begin_layout Plain Layout

make -j 2 CROSS-COMPILE=arm-linux-gnueabihf- u-boot.elf
\end_layout

\end_inset


\end_layout

\begin_layout Standard
verrà generato il file u-boot.elf
\end_layout

\begin_layout Subsection
Creazione immagine di boot
\end_layout

\begin_layout Standard
La successiva operazione da effettuare consiste nella creazione del First
 Stage Boot Loader, responsabile del caricamento del bitstream che permetterà
 la configurazione del Processing System (PS) della Zynq all'avvio.
 Avviare SDK, dal menù 
\begin_inset Quotes eld
\end_inset

File ->Launch SDK
\begin_inset Quotes erd
\end_inset

 all'interno del progetto Vivado.
 Una volta avviato è necessario creare un nuovo progetto da 
\begin_inset Quotes eld
\end_inset

File -> New -> Application Project
\begin_inset Quotes erd
\end_inset

.
 Dopo aver scelto un nome al progetto, cliccando su Next apparirà la seguente
 schermata
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/FSBL_progetto.png
	scale 25

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Creazione First Stage Boot Loader
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Selezionare il template 
\begin_inset Quotes eld
\end_inset

Zynq FSBL
\begin_inset Quotes erd
\end_inset

 come in figura e cliccare su Finish.
\end_layout

\begin_layout Standard
Dal pannello 
\begin_inset Quotes eld
\end_inset

Project Explorer
\begin_inset Quotes erd
\end_inset

 selezionare il progetto appena creato e dal menù 
\begin_inset Quotes eld
\end_inset

Xilinx
\begin_inset Quotes erd
\end_inset

 selezionare 
\begin_inset Quotes eld
\end_inset

Create Boot Image
\begin_inset Quotes erd
\end_inset

.
 Si aprirà la seguente finestra:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Schermata_boot_image.jpg
	scale 35

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Creazione immagine di Boot
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cliccare 
\begin_inset Quotes eld
\end_inset

Add -> Browse...
\begin_inset Quotes erd
\end_inset

 e selezionare il file u-boot.elf generato dalla compilazione di u-boot.elf.
 Se l'inserimento è andato a buon fine si potrà visualizzare il file u-boot.elf
 nella lista Boot image partitions.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Boot_Image_completa.png
	scale 35

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Creazione immagine di Boot
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'ultima operazione da effettuare è quella di cliccare su 
\begin_inset Quotes eld
\end_inset

Create Image
\begin_inset Quotes erd
\end_inset

.
 Se il processo è andato a buon fine verrà creato, nel path identificato
 dal percorso 
\begin_inset Quotes eld
\end_inset

Output path
\begin_inset Quotes erd
\end_inset

, il file BOOT.bin.
\end_layout

\begin_layout Subsection
Compilazione del Device Tree
\end_layout

\begin_layout Standard
La successiva operazione è quella di creare un Device Tree Blob, il quale
 ha il compito di descrivere l'architettura hardware al sistema operativo.
 Prima di procedere alla creazione del dtb è necessario aggiungere le repositori
es DTS di Xilinx a quelle disponibili all' interno del SDK.
 Dal menù 
\begin_inset Quotes eld
\end_inset

Xilinx
\begin_inset Quotes erd
\end_inset

 selezionare 
\begin_inset Quotes eld
\end_inset

Repositories
\begin_inset Quotes erd
\end_inset

, cliccare su 
\begin_inset Quotes eld
\end_inset

New...
\begin_inset Quotes erd
\end_inset

 e selezionare la cartella device-tree-xlnx precedentemente clonata.
 Se l'aggiunta è andata a buon fine si visualizzerà la voce device-tree-xlnx
 tra le repositories locali.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Repositories.png
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Aggiunta repositories device-tree-xlnx
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
A questo punto è possibile procedere con la creazione del device-tree.
 Creare un 
\begin_inset Quotes eld
\end_inset

Board Support Package
\begin_inset Quotes erd
\end_inset

 dal menù 
\begin_inset Quotes eld
\end_inset

File -> New
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/board_support.png
	scale 35

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Creazione Board Support Package
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Selezionare device_tree come mostrato in figura e cliccare su 
\begin_inset Quotes eld
\end_inset

Finish
\begin_inset Quotes erd
\end_inset

.
 Il progetto appena creato sarà composto dai seguenti file:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/bsp.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Progetto Board Support Package
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nel file system-top.dts è necessario modificare i parametri di boot per il
 kernel come segue:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

bootargs = "console=ttyPS0,115200 root=/dev/mmcblk0p2 rw earlyprintk rootfstype=
ext4 rootwait devtmpfs.mount=1 earlycon";
\end_layout

\end_inset


\end_layout

\begin_layout Standard
L'ultima operazione da effettuare è compilare il device-tree-source ottenendo
 il device-tree-blob.
 Aprire un terminale nella cartella del progetto relativo al Board Support
 Package e lanciare il seguente comando
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

dtc -I dts -O dtb -o devicetree.dtb system-top.dts
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Creazione della uImage
\end_layout

\begin_layout Standard
A questo punto è possibile procedere con la compilazione del Kernel scaricato.
 Recarsi nella cartella linux-xlnx e lanciare i seguenti comandi 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

make xilinx_zynq_defconfig
\end_layout

\begin_layout Plain Layout

make menuconfig
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Il secondo comando aprirà il menù di configurazione seguente:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/menuconfig.png
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Menu di Configurazione del Kernel
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

Da questa schermata è possibile modificare la configurazione del kernel.
 Per abilitare il supporto ai driver Userspace I/O che verranno trattati
 nel seguenti capitolo bisogna recarsi in General Setup e verificare che
 la spunta Userspace I/O sia asserita.
 Per la definitiva compilazione lanciare i seguenti comandi:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

make -j 4
\end_layout

\begin_layout Plain Layout

make -j 4 UIMAGE_LOADADDR=0x8000 uImage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Verrà creato un file uImage all'interno della directory "arch/arm/boot/"
\end_layout

\begin_layout Subsection
Preparazione SD card
\end_layout

\begin_layout Standard
Formattare una SD card con tre partizioni divise nel seguente modo:
\end_layout

\begin_layout Enumerate
4MB spazio non allocato (root)
\end_layout

\begin_layout Enumerate
1GB FAT32 (BOOT)
\end_layout

\begin_layout Enumerate
lo spazio rimanente EXT4
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/gparted.png
	scale 45

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Parzionamento SD Card con GParted
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Copiare infine sulla partizione di BOOT FAT32 i file Boot.bin, devicetree.dtb
 e la uImage.
 Nella partizione EXT4 va invece instanziato il filesystem di root.
 Per effettuare questa operazione è necessario scompattare l'archivio .tar,
 scaricato in precedenza dal sito di Linaro, ed impartire il seguente comando:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=bash"
inline false
status open

\begin_layout Plain Layout

rsync -azv "path_cartella_scompattata_linaro"/binary/ "path mount point
 nella partizione EXT4"
\end_layout

\end_inset


\end_layout

\end_body
\end_document
