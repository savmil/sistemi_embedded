#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\use_default_options true
\master Tesina.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Traccia
\end_layout

\begin_layout Section*

\lang english
Progetto corso Embedded aa 2018-19
\end_layout

\begin_layout Section*

\lang english
Descrizione del sistema da realizzare
\end_layout

\begin_layout Standard

\lang english
Occorre progettare e realizzare un sottosistema S_com adibito alla gestione
 dello scambio di messaggi M fra due o più board di un sistema embedded
 operante in regime critico e ad alta affidabilità.
 Lo scambio dei messaggi deve essere conforme con lo standard ferroviario
 
\begin_inset Quotes eld
\end_inset

Protocollo Vitale Standard (PVS) che si allega.
\end_layout

\begin_layout Standard

\lang english
Le board da utilizzare montano o SOC della serie STM32F3 su board Discovery
 o processori ibridi della famiglia ARM Zynq su board della Digilent (Zybo/ZedBo
ard).
 
\end_layout

\begin_layout Standard

\lang english
La connettività fra le varie board (solitamente una board ha funzioni di
 master e le altre di slave) deve poter essere realizzata con connessioni
 seriali punto-punto (con protocollo UART) e con connessioni con bus seriali
 di tipo I2C, SPI e CAN.
\end_layout

\begin_layout Standard

\lang english
Si ricorda che la trasmissione con UART e quelle su bus I2C e CAN utilizzano
 una connessione a tre fili (Rx, Tx e massa).
 Per l'UART non si devono prendere in considerazione eventuali coppie di
 segnali di handshaking previsti dal protocollo asincrono).
 Quella con SPI avviene, invece, su 3 fili (SCLK, MISO, MOSI) più i k fili
 di selezione fisica che vanno dalla board master alle k slave (un filo
 di selezione per ciascuna delle k unità).
 I protocolli I2C e CAN selezionano l'entità con cui interoperare in base
 al valore di un 
\begin_inset Quotes eld
\end_inset

campo indirizzi
\begin_inset Quotes erd
\end_inset

 presente nei frame trasmessi.
\end_layout

\begin_layout Section*

\lang english
Architettura Software
\end_layout

\begin_layout Standard

\lang english
L'architettura software da realizzare è riportata in fig.xx.
 Essa è strutturata in unità funzionali organizzate su due livelli:
\end_layout

\begin_layout Itemize

\lang english
un primo livello che si interfaccia con le funzionalità di uno strato HAL
 (librerie fornite con le schede, in particolare, quelle dell'ambiente Cube
 di St e quelle di ARM-Digilent per la Zynq).
 Per ciascuno dei dispositivi associati ai quattro protocolli di comunicazione
 utilizzati, devono essere sviluppati i relativi driver che dovranno operare
 con uso di interruzioni.
 
\end_layout

\begin_layout Itemize

\lang english
un secondo livello verso lo strato applicativo caratterizzato da API per
 lo scambio messaggi (primitive di send e receive che parametrizzano il
 particolare dispositivo di comunicazione da utilizzare).
 Tale strato provvede a incapsulare i driver dei quattro dispositivi mediante
 gusci software e a virtualizzarne e parametrizzarne le funzionalità in
 un'unica funzione avente come parametri il messaggio M da trasmettere,
 il canale C (uno o anche più canali) da utilizzare per il trasferimento
 e lo stato dell'operazione.
 Per ciascuno dei messaggi da trasferire, tale funzione calcola anche due
 CRC (CRC1 e CRC2, secondo il formato PVS) e genera un frame standard che
 li include.
\end_layout

\begin_layout Section*

\lang english
Applicativo di prova
\end_layout

\begin_layout Standard

\lang english
Il linguaggio con cui sviluppare i due livelli è C.
 Il sistema realizzato deve essere testato mediante uno o più applicativi
 in grado di verificarne tutte le funzionalità.
 Il software sviluppato deve essere verificato nei tempi di esecuzione delle
 varie funzioni.
\end_layout

\end_body
\end_document
