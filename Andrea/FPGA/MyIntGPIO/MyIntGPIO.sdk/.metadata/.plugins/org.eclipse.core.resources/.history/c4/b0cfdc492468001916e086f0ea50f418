#include <stdio.h>
#include <stdlib.h>
#include "xil_io.h"
#include "xil_exception.h"
#include "xparameters.h"
#include "xil_cache.h"
#include "xil_printf.h"
#include "xil_types.h"
#include "xscugic.h"

#include "myIntGPIO2.h"

/************************** Constant Definitions *****************************/

#define INTC_DEVICE_ID		XPAR_SCUGIC_0_DEVICE_ID
#define INTC_DEVICE_INT_ID	XPAR_MYINTGPIO_0_DEVICE_ID

#define GPIOSWITCH_INT_ADDR	0x43C10000
#define GPIOSWITCH_BASE_ADDR	0x43C00000

#define GPIOBUTTON_INT_ADDR	0x43C30000
#define GPIOBUTTON_BASE_ADDR	0x43C20000

#define GPIOLED_INT_ADDR	0x43C50000
#define GPIOLED_BASE_ADDR	0x43C40000

/**************************** Type Definitions *******************************/
void DeviceDriverHandler();
myIntGPIO GPIO_Switch,GPIO_Button,GPIO_Led;



volatile static int InterruptProcessed = FALSE;
volatile static int count = 0;


int main(void)
{
	int Status;
	print("diocane");


	XScuGic InterruptController;
	XScuGic_Config *GicConfig;

	MYINTGPIO_Init(&GPIO_Switch,GPIOSWITCH_BASE_ADDR,GPIOSWITCH_INT_ADDR);
	MYINTGPIO_Init(&GPIO_Button,GPIOBUTTON_BASE_ADDR,GPIOBUTTON_INT_ADDR);
	MYINTGPIO_Init(&GPIO_Led,GPIOLED_BASE_ADDR,GPIOLED_INT_ADDR);






	GicConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	Status = XScuGic_CfgInitialize(&InterruptController,GicConfig, GicConfig->CpuBaseAddress);
	if ( Status != XST_SUCCESS) return XST_FAILURE;



	MYIP_WITH_INTERRUPT_EnableInterrupt(&myIntGPIOInst,0x1);
	MYIP_WITH_INTERRUPT_GlobalEnableInterrupt(&myIntGPIOInst,0x01);



	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler)XScuGic_InterruptHandler,&InterruptController);
	Xil_ExceptionEnable();


	Status = XScuGic_Connect(&InterruptController,XPAR_FABRIC_MYINTGPIO_0_IRQ_INTR,
			(Xil_ExceptionHandler)DeviceDriverHandler,(void *)&InterruptController);
	if ( Status != XST_SUCCESS) return XST_FAILURE;

	MYIP_WITH_INTERRUPT_EnableInterrupt(&myIntGPIOInst,0x1);

	MYINTGPIO_SetMask(&myIntGPIOInst, 0xF);

	XScuGic_Enable(&InterruptController,XPAR_FABRIC_MYINTGPIO_0_IRQ_INTR);

//	XScuGic_SetPriorityTriggerType(&InterruptController,XPAR_FABRIC_myIntGPIO_0_INTERRUPT_INTR,0x3,0x3);

	int i=1;

	while(i>0){
		if(InterruptProcessed){
		i++;
		InterruptProcessed =FALSE;
		}
		}
}




void DeviceDriverHandler()
{
	MYIP_WITH_INTERRUPT_DisableInterrupt(&myIntGPIOInst,0x01);
	InterruptProcessed = TRUE;
	print("puttana di dio");
	count++;
	MYIP_WITH_INTERRUPT_ACK(&myIntGPIOInst,0x01);
	MYIP_WITH_INTERRUPT_EnableInterrupt(&myIntGPIOInst,0x01);
}
