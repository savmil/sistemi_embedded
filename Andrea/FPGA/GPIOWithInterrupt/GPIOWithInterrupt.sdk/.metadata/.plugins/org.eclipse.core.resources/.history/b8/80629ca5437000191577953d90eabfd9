#include "gpio_int.h"
#include "xil_io.h"
#include "xil_exception.h"
#include "xparameters.h"
#include "xil_cache.h"
#include "xil_printf.h"
#include "xil_types.h"
#include "xscugic.h"

#define INTC_DEVICE_ID		XPAR_SCUGIC_0_DEVICE_ID
#define BASE_ADDR			0x43C00000

myIntGPIO GPIO_Switch;

void SwitchISR(){}

void SetupInterrupt(){

	XScuGic InterruptController;
	XScuGic_Config *GicConfig;
	int Status;

	GicConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	Status = XScuGic_CfgInitialize(&InterruptController,GicConfig, GicConfig->CpuBaseAddress);
	if ( Status != XST_SUCCESS) return XST_FAILURE;

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler)XScuGic_InterruptHandler,&InterruptController);
	Xil_ExceptionEnable();

	Status = XScuGic_Connect(&InterruptController,XPAR_FABRIC_GPIO_0_INTERRUPT_INTR,
			(Xil_ExceptionHandler)SwitchISR,(void *)&InterruptController);
	if ( Status != XST_SUCCESS) return XST_FAILURE;

	XScuGic_Enable(&InterruptController,XPAR_FABRIC_GPIO_0_INTERRUPT_INTR);
}

int main(void){

	SetupInterrupt();

	XGPIO_Init(&myIntGPIO, BASE_ADDR);

	int i=1;

	int * punt = (int *) 0x43C00018;
	int status;
	while(i>0){
		i++;
		status = *((int * ) punt);
	}
}
