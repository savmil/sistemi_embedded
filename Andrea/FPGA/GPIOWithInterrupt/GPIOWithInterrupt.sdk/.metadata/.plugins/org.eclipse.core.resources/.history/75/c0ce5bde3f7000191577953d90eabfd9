#include "gpio_int.h"
#include "GPIO.h"
#include "xil_types.h"
#include "xil_io.h"

void SetupInterrupt(){

	GicConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	Status = XScuGic_CfgInitialize(&InterruptController,GicConfig, GicConfig->CpuBaseAddress);
	if ( Status != XST_SUCCESS) return XST_FAILURE;

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler)XScuGic_InterruptHandler,&InterruptController);
	Xil_ExceptionEnable();

	Status = XScuGic_Connect(&InterruptController,XPAR_FABRIC_GPIO_0_INTERRUPT_INTR,
			(Xil_ExceptionHandler)SwitchISR,(void *)&InterruptController);
	if ( Status != XST_SUCCESS) return XST_FAILURE;

	XScuGic_Enable(&InterruptController,XPAR_FABRIC_GPIO_0_INTERRUPT_INTR);
}

void MYINTGPIO_EnableInterrupt(myIntGPIO * myIntGPIOInstance, u32 mask)
{
	u32 Register;
	unsigned EN_INT_OFFSET = 0x00;
	Register = GPIO_mReadReg(myIntGPIOInstance->BaseAddress,EN_INT_OFFSET);
	GPIO_mWriteReg(myIntGPIOInstance->BaseAddress, EN_INT_OFFSET, Register | mask);

}


void MYINTGPIO_GlobalEnableInterrupt(myIntGPIO * myIntGPIOInstance, u32 mask)
{
	u32 Register;
	unsigned GIE_OFFSET = 0x00;
	Register = GPIO_mReadReg(myIntGPIOInstance->IntAddress,GIE_OFFSET);
	GPIO_mWriteReg(myIntGPIOInstance->IntAddress,GIE_OFFSET, Register | mask);

}

void MYINTGPIO_DisableInterrupt(myIntGPIO * myIntGPIOInstance, u32 mask)
{
	u32 Register;
	unsigned IER_OFFSET = 0x04;
	Register = GPIO_mReadReg(myIntGPIOInstance->IntAddress,IER_OFFSET);
	GPIO_mWriteReg(myIntGPIOInstance->IntAddress,IER_OFFSET, Register & (~mask));
}


void MYINTGPIO_ACK(myIntGPIO * myIntGPIOInstance, u32 mask)
{
	u32 Register;
	unsigned ACK_OFFSET = 0x0C;
	Register = GPIO_mReadReg(myIntGPIOInstance->IntAddress,ACK_OFFSET);
	GPIO_mWriteReg(myIntGPIOInstance->IntAddress,ACK_OFFSET, Register | mask);
}

void MYINTGPIO_SetMask(myIntGPIO * myIntGPIOInstance, u32 mask){
		u32 Register;
		unsigned MASK_OFFSET = 0x08;
		Register = GPIO_mReadReg(myIntGPIOInstance->BaseAddress,MASK_OFFSET);
		GPIO_mWriteReg(myIntGPIOInstance->BaseAddress,MASK_OFFSET, Register | mask);
}

void MYINTGPIO_Init(myIntGPIO * myIntGPIOInstance, u32 baseaddr, u32 intaddr){
	myIntGPIOInstance->BaseAddress=baseaddr;
}
