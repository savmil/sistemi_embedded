/*
 * uart_intr.c
 *
 *  Created on: 27 apr 2019
 *      Author: michele
 */

#include "my_uart_int.h"
#include "uart_intr.h"
#include "xil_types.h"
#include "xil_io.h"


void MY_UART_INT_EnableInterrupt(MY_UART_INT * MY_UART_INTInstance, u32 mask)
{
	u32 Register;
	unsigned IER_OFFSET = 0x04;
	Register = MY_UART_INT_mReadReg(MY_UART_INTInstance->IntAddress,IER_OFFSET);
	MY_UART_INT_mWriteReg(MY_UART_INTInstance->IntAddress,IER_OFFSET, Register | mask);

}


void MY_UART_INT_GlobalEnableInterrupt(MY_UART_INT * MY_UART_INTInstance, u32 mask)
{
	u32 Register;
	unsigned GIE_OFFSET = 0x00;
	Register = MY_UART_INT_mReadReg(MY_UART_INTInstance->IntAddress,GIE_OFFSET);
	MY_UART_INT_mWriteReg(MY_UART_INTInstance->IntAddress,GIE_OFFSET, Register | mask);

}

void MY_UART_INT_DisableInterrupt(MY_UART_INT * MY_UART_INTInstance, u32 mask)
{
	u32 Register;
	unsigned IER_OFFSET = 0x04;
	Register = MY_UART_INT_mReadReg(MY_UART_INTInstance->IntAddress,IER_OFFSET);
	MY_UART_INT_mWriteReg(MY_UART_INTInstance->IntAddress,IER_OFFSET, Register & (~mask));
}


void MY_UART_INT_ACK(MY_UART_INT * MY_UART_INTInstance, u32 mask)
{
	u32 Register;
	unsigned ACK_OFFSET = 0x0C;
	Register = MY_UART_INT_mReadReg(MY_UART_INTInstance->IntAddress,ACK_OFFSET);
	MY_UART_INT_mWriteReg(MY_UART_INTInstance->IntAddress,ACK_OFFSET, Register | mask);
}

void MY_UART_INT_SetMask(MY_UART_INT * MY_UART_INTInstance, u32 mask){
		u32 Register;
		unsigned MASK_OFFSET = 0x08;
		Register = MY_UART_INT_mReadReg(MY_UART_INTInstance->BaseAddress,MASK_OFFSET);
		MY_UART_INT_mWriteReg(MY_UART_INTInstance->BaseAddress,MASK_OFFSET, Register | mask);
}

void MY_UART_INT_Init(MY_UART_INT * MY_UART_INTInstance, u32 baseaddr, u32 intaddr){
	MY_UART_INTInstance->BaseAddress=baseaddr;
	MY_UART_INTInstance->IntAddress=intaddr;
}
